- name: rpm --import
  rpm_key:
    key: "{{ item.key }}"
    fingerprint: "{{ item.fingerprint }}"
    state: "{{ item.state }}"
  loop: "{{ _rpm_key[kernel_release] }}"
  register: result
  until: result is succeeded

- name: download archive
  shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ item.checksum }}-get_url.log)
    TMP_DIR="$(mktemp -d)" \
      && cd $TMP_DIR \
      && mkdir -p .{{ item.dest | dirname }} \
      && curl -skL -m 300 {{ item.url }} > .{{ item.dest }} \
      && echo -n "{{ item.checksum }} .{{ item.dest }}" | sha256sum -c - \
      && mkdir -p {{ item.dest | dirname }} \
      && mv .{{ item.dest }} {{ item.dest }} \
      && rm -rf $TMP_DIR
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ item.checksum }}-get_url.log"
  loop: "{{ _rpm_download[kernel_release] }}"
  register: result
  until: result is succeeded

- name: yum install prepare
  shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ item.checksum }}-unarchive.log)
    yum install -y {{ item.dest }}
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ item.checksum }}-unarchive.log"
  loop: "{{ _rpm_download[kernel_release] }}"
  changed_when: false
  failed_when: false

- name: yum-config-manager --add-repo
  yum_repository:
    file: "{{ item.file }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    baseurl: "{{ item.baseurl }}"
    enabled: "{{ item.enabled }}"
    priority: "{{ item.priority }}"
    module_hotfixes: "{{ item.module_hotfixes }}"
    gpgcheck: "{{ item.gpgcheck }}"
    gpgkey: "{{ item.gpgkey }}"
    state: "{{ item.state }}"
  loop: "{{ _yum_repository[kernel_release] }}"

- name: yum install
  yum:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    enablerepo: "{{ item.enablerepo | default(None) or omit }}"
  loop: "{{ _yum[kernel_release] }}"
  register: result
  until: result is succeeded

- name: update /etc/default/grub
  ini_file:
    path: "/etc/default/grub"
    section: ""
    option: "{{ item.option }}"
    value: "\"{{ item.value }}\""
    mode: "0644"
    no_extra_spaces: true
    state: "present"
  loop:
    - { option: "GRUB_DEFAULT", value: "0" }

- name: add 'numa=off' in /etc/default/grub
  replace:
    path: /etc/default/grub
    regexp: '(^GRUB_CMDLINE_LINUX.*)(.*(?<!numa=off))"$'
    replace: '\1 numa=off"'
  notify:
    - kernel | grub2-mkconfig -o /boot/grub2/grub.cfg
    - kernel | dracut -f
